import {
  require_client
} from "./chunk-RYU37NNL.js";
import "./chunk-EL3ZTUGS.js";
import {
  require_react
} from "./chunk-HS5T2ZWL.js";
import {
  __toESM
} from "./chunk-AUZ3RYOM.js";

// node_modules/@astrojs/react/client.js
var import_react2 = __toESM(require_react());
var import_client = __toESM(require_client());

// node_modules/@astrojs/react/static-html.js
var import_react = __toESM(require_react(), 1);
var StaticHtml = ({ value, name, hydrate = true }) => {
  if (!value)
    return null;
  const tagName = hydrate ? "astro-slot" : "astro-static-slot";
  return (0, import_react.createElement)(tagName, {
    name,
    suppressHydrationWarning: true,
    dangerouslySetInnerHTML: { __html: value }
  });
};
StaticHtml.shouldComponentUpdate = () => false;
var static_html_default = StaticHtml;

// node_modules/@astrojs/react/client.js
function isAlreadyHydrated(element) {
  for (const key in element) {
    if (key.startsWith("__reactContainer")) {
      return key;
    }
  }
}
var client_default = (element) => (Component, props, { default: children, ...slotted }, { client }) => {
  if (!element.hasAttribute("ssr"))
    return;
  const renderOptions = {
    identifierPrefix: element.getAttribute("prefix")
  };
  for (const [key, value] of Object.entries(slotted)) {
    props[key] = (0, import_react2.createElement)(static_html_default, { value, name: key });
  }
  const componentEl = (0, import_react2.createElement)(
    Component,
    props,
    children != null ? (0, import_react2.createElement)(static_html_default, { value: children }) : children
  );
  const rootKey = isAlreadyHydrated(element);
  if (rootKey) {
    delete element[rootKey];
  }
  if (client === "only") {
    return (0, import_react2.startTransition)(() => {
      const root = (0, import_client.createRoot)(element);
      root.render(componentEl);
      element.addEventListener("astro:unmount", () => root.unmount(), { once: true });
    });
  }
  (0, import_react2.startTransition)(() => {
    const root = (0, import_client.hydrateRoot)(element, componentEl, renderOptions);
    root.render(componentEl);
    element.addEventListener("astro:unmount", () => root.unmount(), { once: true });
  });
};
export {
  client_default as default
};
//# sourceMappingURL=@astrojs_react_client__js.js.map
